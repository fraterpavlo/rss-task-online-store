{
  "compileOnSave": true, 
  "compilerOptions": {
    "esModuleInterop": true,
    "resolveJsonModule": true,
    "rootDir": "./src",
    "module": "ES6", // Определяет тип импорта кода в итоговом файле, прописанном в "outFile". Необходимо задавать при использовании опции "outFile".
    "outDir": "./buildTS", // Поместить все скомпилированные файлы в данную папку, согласно их вложенности в исходниках. Если задана опция "outFile", то опция "outDir" будет проигнорирована.
    // Если "outFile" и "outDir" не заданы, то выходные файлы будут созданы рядом со своими исходниками.
    "baseUrl": ".", // Путь до базовой папки для поиска не относительных путей до файлов.
    // "lib": ["es6", "es5", "es2015.promise", "es2016.array.include"], // Набор библиотечных файлов полифилов, которые будут включены в итоговый выходной файл.
    "allowJs": true, // Разрешать компилировать файлы с JavaScript-кодом?
    "alwaysStrict": true, // Компилировать ли каждый файл в строгом режиме и создавать ли 'use strict' для каждого выходного файла? Требуется TypeScript версии 2.1 или новее.
    "checkJs": true, // Сообщить об ошибках в .js-файлах? Используйте совместно с "allowJs".
    "downlevelIteration": true, // Обеспечьте полную поддержку итераций для for - in, ..., деструктуризации при настройке на ES5 или ES3?
    "noEmitOnError": false, // Не создавать итоговый файл, если во время компиляции произошла ошибка.
    "noUnusedLocals": true, // Показывать ошибку, если где-то найдены неиспользуемые локальные значения.
    "noUnusedParameters": true, // Показывать ошибку, если где-то найдены неиспользуемые параметры.
    "pretty": true, // Окрашивать в терминале сообщения об ошибках.
    "strict": true, // Включить ли все строги проверки типов сразу: noImplicitAny, noImplicitThis, alwaysStrict, strictNullChecks, strictFunctionTypes, strictPropertyInitialization?
    "strictNullChecks": true, // Значения "null" и "undefined" могут быть присвоены только значениям данного типа и значениям только с типом "any"?
    "target": "es6", // Тип кода создаваемого итогового файла.
    "watch": true, // Запустить компилятор в режиме отслеживания изменений во входных файлах и их повторной компиляции?

    // Дополнительные настройки.
    "allowSyntheticDefaultImports": true, // Разрешить импортировать модули не имеющие внутри себя "import default"?
    "allowUnreachableCode": true, // Сообщить об ошибке в случае обнаружения кода, который никогда не будет выполнен?
    "allowUnusedLabels": true, // Не создавать сообщений об ошибках, если в коде найдены неиспользуемые метки label?



    // "sourceRoot": ".", // Путь до папки, в которой дебаггер должен искать исходные source файлы. ????????????????????????????????????
    // "mapRoot": ".", // Путь до папки, в которой дебаггер браузера должен будет искать файлы с source map. ????????????????????????????????????



    "moduleResolution": "node", // Определить способ поиска модулей в папках: как в Node.js или классический, как в TypeScript 1.5 и ниже.
    "noFallthroughCasesInSwitch": true, // Сообщить об ошибке в случае обнаружения проваливания в конструкции switch-case?
    "noImplicitAny": true, // Показывать ошибку, если где-то задан тип "any".
    "noImplicitThis": true, // Показывать ошибку на "this", если где-то задан тип "any".
    "noImplicitReturns": true, // Сообщить об ошибке, когда не все пути кода в функции возвращают значение?
    "noStrictGenericChecks": false, // Отключить строгую проверку типов джинериков в типах функций?
    "strictFunctionTypes": true, // Отключить проверку бивариантных параметров для типов функций.
    "strictPropertyInitialization": true, // Убедитесь, что свойства класса, имеющие значения undefined, получают новые значения внутри конструктора.
  },
  // "files": [
  //   // Список относительных или абсолютных путей до конкретных исходных файлов, которые обязательно надо скомпилировать.
  //   // Если секция "files" не указана, то компилятор по умолчанию включает все файлы с расширением *.ts и *.tsx, которые находятся в корневой папке и внутренних подпапках проекта.
  //   // Если секция "files" указана, то скомпилируются файлы, которые в ней перечислены.
  //   // Все файлы, на которые есть ссылки в файлах из секции "files", также скомпилируются.
  //   "core.ts",
  //   "app.ts"
  // ],
  // Вместе с компиляцией только конкретных исходных файлов можно компилировать только файлы в заданных папках, которые будут найдены через регулярные выражения, которые принимают только следующие значения:
  // - букву или цифру;
  // - * - ноль или более любых символов, не включая разделители директорий "/" и "\";
  // - ? - один любой символ, не включая разделители директорий "/" и "\";
  // - **/ - рекурсивно включить любую подпапку.
  // Если путь до папки заканчивается так "*" или так ".*", тогда в ней будут скомплированы все файлы с расширениями .ts, .tsx, .d.ts, а также .js и .jsx, если опция "allowJs" будет равна true.
  "include": [
    // Секция "include" позволяет скомпилировать все файлы, находящиеся в заданных папках.
    // Если секция "files" и секция "include" заданы вместе, то будут скомпилированы только файлы, перечисленные в обеих секциях.
    // Все файлы, на которые есть ссылки во включенных файлах из секции "files" и секции "include", также скомпилируются.
    "src/**/*"
  ],
  // "exclude": [
  //   // Секция "exclude" позволяет исключить при компиляции определенные файлы, которые находятся в заданных папках секции "include" или в папках всего проекта, если секция "include" не задана.
  //   // Компилятор не будет учитывать перечисленные в секции "exclude" файлы TypeScript, которые находятся в папках из секции "include".
  //   // Однако файлы, заданные в секции "files" будут обязательно скомпилированы.
  //   // Если секция "exclude" не указана, то по умолчанию будут исключаться из компиляции все файлы из папок:
  //   // - node_modules,
  //   // - bower_components,
  //   // - jspm_packages,
  //   // - файлы из папки, указанной в опции компилятора "outDir".
  //   "node_modules"
  // ]
}
